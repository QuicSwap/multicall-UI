@use 'sass/color';
@use 'sass/size';
@use 'sass/font';
@use 'sass/mixin';

.base-task  {
    background: color.$lightest;
    .name {
        color: color.$text !important;
        h3 {
            color: color.$text;
        }
        .icon {
            fill: color.$text !important;
        }
    }
    * > a {
        color: darken(color.$blue, 20%) !important;
    }
}

.task-container {
    position: relative;
    display: flex;
    @include mixin.center-items;
    flex-flow: column nowrap;
    width: 100%;
    min-height: size.$task-height;
    border-radius: size.$task-radius;
    overflow: hidden;
    * {
        color: color.$text;
    }
    .name {
        @include mixin.center-items;
        font-size: size.$text;
        padding-top: 0.25 * size.$gap;
        padding-bottom: 0.25 * size.$gap;
        * {
            color: color.$light-text;
        }
        .icon {
            @include mixin.icon;
            position: absolute;
            right: 0.5 * size.$gap;
            fill: color.$light-text;
            cursor: pointer;
            &:hover,
            &:focus {
                color: color.$lightest;
            }
        }
    }
    .data-container {
        @include mixin.no-scrollbar;
        flex: 1;
        max-height: 100%;
        width: 80%;
        overflow-y: scroll;
        padding: 0.5 * size.$gap;
        padding-bottom: size.$gap;
        pre.code {
            @include mixin.no-scrollbar;
            padding: 0.5rem;
            margin: 0.5rem;
            background-color: rgba(color.$white, 1);
            border-radius: 0.5 * size.$task-radius;
            font-family: font.$code;
            font-size: size.$smaller-text;
            overflow-x: scroll;
        }
        p {
            display: flex;
            width: 100%;
            flex-flow: row nowrap;
            justify-content: space-between;
            margin-bottom: -0.3rem;
            font-size: size.$small-text;
            span {
                white-space: nowrap;
            }
            .code {
                @include mixin.no-wrap;
                line-height: 1.85rem;
                font-family: font.$code;
                font-size: size.$smaller-text;
            }
            &.expandable {
                flex-wrap: wrap;
            }
        }
        &.hidden {
            display: none;
        }
    }
}

.edit {
    @include mixin.full;
    @include mixin.no-scrollbar;
    overflow-y: scroll;
    .unitInput {
        @include mixin.center-items(center, flex-start);
        flex-flow: row nowrap;
        .MuiTextField-root {
            &:first-of-type {
                flex: 2 1 auto;
            }
            &:last-of-type {
                flex: 1 0 40px;
                margin-left: 0.25 * size.$gap;
                select {
                    height: 2rem;
                    line-height: 1rem;
                    font-size: size.$small-text;
                }
            }
        }
        &:last-of-type .MuiTextField-root {
            &:first-of-type fieldset {
                border-radius: 0 0 0 size.$task-radius;
            }
            &:last-of-type fieldset {
                border-radius: 0 0 size.$task-radius 0;
            }
        }
    }
    .checkbox {
        @include mixin.center-items(flex-start, center);
        flex-flow: row nowrap;
        width: 100%;
        p {
            color: color.$light-text;
            font-size: size.$small-text;
        }
        .MuiCheckbox-root {
            color: color.$light;
            &.Mui-checked {
                color: color.$green;
            }
            .MuiSvgIcon-root {
                font-size: size.$text;
            }
        }
    }
    .MuiTextField-root {
        p.Mui-error {
            color: color.$red;
            font-family: font.$text;
            font-size: size.$small-text;
            &::before {
                content: 'Error: '
            }
        }
        label {
            font-family: font.$text;
            &.Mui-focused {
                color: color.$light-text;
            }
            &.Mui-error {
                color: color.$red;
            }
        }
        .MuiOutlinedInput-root {
            input, textarea {
                color: color.$white;
                font-family: font.$code;
                font-size: size.$small-text;
            }
            textarea {
                @include mixin.no-scrollbar;
                white-space: pre;
                overflow-x: scroll !important;
            }
            fieldset {
                border-color: color.$lightish;
                border-width: 1px;
                background-color: rgba(color.$darkest, 0.25);
                border-radius: 0;
                legend {
                    background-color: color.$dark;
                    margin-left: -2px;
                    padding: 2px;
                    border-radius: 20px;
                    visibility: visible;
                }
                legend > span {
                    font-size: 0.75em;
                    visibility: hidden;
                }
            }
            &:hover fieldset {
                border-color: color.$light;
            }
            &.Mui-focused fieldset {
                border-color: color.$light;
            }
            &.Mui-error fieldset {
                border-color: color.$red !important;
            }
        }
        .MuiInput-underline {
            &:hover::before,
            &::before {
                border-bottom-color: color.$lightish;
            }
            &:hover::after,
            &::after {
                border-bottom-color: color.$light;
            }
            input {
                font-weight: 500;
            }
        }
        *:not(input) {
            color: color.$light-text;
            font-size: 1em;
        }
        font-size: 1.8rem;
    }
    & > .MuiTextField-root {
        &:first-of-type {
            margin-top: 0;
        }
        &:nth-of-type(2) > .MuiOutlinedInput-root > fieldset {
            border-radius: size.$task-radius size.$task-radius 0 0;
        }
        &:last-of-type > .MuiOutlinedInput-root > fieldset {
            border-radius: 0 0 size.$task-radius size.$task-radius;
        }
    }
}

option {
    font-size: size.$text;
}